{
    "policy_class": {
        ":type:": "<class 'abc.ABCMeta'>",
        ":serialized:": "gAWVMAAAAAAAAACMHnN0YWJsZV9iYXNlbGluZXMzLnRkMy5wb2xpY2llc5SMCVREM1BvbGljeZSTlC4=",
        "__module__": "stable_baselines3.td3.policies",
        "__annotations__": "{'actor': <class 'stable_baselines3.td3.policies.Actor'>, 'actor_target': <class 'stable_baselines3.td3.policies.Actor'>, 'critic': <class 'stable_baselines3.common.policies.ContinuousCritic'>, 'critic_target': <class 'stable_baselines3.common.policies.ContinuousCritic'>}",
        "__doc__": "\n    Policy class (with both actor and critic) for TD3.\n\n    :param observation_space: Observation space\n    :param action_space: Action space\n    :param lr_schedule: Learning rate schedule (could be constant)\n    :param net_arch: The specification of the policy and value networks.\n    :param activation_fn: Activation function\n    :param features_extractor_class: Features extractor to use.\n    :param features_extractor_kwargs: Keyword arguments\n        to pass to the features extractor.\n    :param normalize_images: Whether to normalize images or not,\n         dividing by 255.0 (True by default)\n    :param optimizer_class: The optimizer to use,\n        ``th.optim.Adam`` by default\n    :param optimizer_kwargs: Additional keyword arguments,\n        excluding the learning rate, to pass to the optimizer\n    :param n_critics: Number of critic networks to create.\n    :param share_features_extractor: Whether to share or not the features extractor\n        between the actor and the critic (this saves computation time)\n    ",
        "__init__": "<function TD3Policy.__init__ at 0xffff54597e20>",
        "_build": "<function TD3Policy._build at 0xffff54597eb0>",
        "_get_constructor_parameters": "<function TD3Policy._get_constructor_parameters at 0xffff54597f40>",
        "make_actor": "<function TD3Policy.make_actor at 0xffff545ac040>",
        "make_critic": "<function TD3Policy.make_critic at 0xffff545ac0d0>",
        "forward": "<function TD3Policy.forward at 0xffff545ac160>",
        "_predict": "<function TD3Policy._predict at 0xffff545ac1f0>",
        "set_training_mode": "<function TD3Policy.set_training_mode at 0xffff545ac280>",
        "__abstractmethods__": "frozenset()",
        "_abc_impl": "<_abc._abc_data object at 0xffff54599840>"
    },
    "verbose": 1,
    "policy_kwargs": {
        "net_arch": [
            400,
            300
        ]
    },
    "num_timesteps": 300000,
    "_total_timesteps": 300000,
    "_num_timesteps_at_start": 0,
    "seed": null,
    "action_noise": {
        ":type:": "<class 'stable_baselines3.common.noise.OrnsteinUhlenbeckActionNoise'>",
        ":serialized:": "gAWVbAEAAAAAAACMHnN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi5ub2lzZZSMHE9ybnN0ZWluVWhsZW5iZWNrQWN0aW9uTm9pc2WUk5QpgZR9lCiMBl90aGV0YZRHP8MzMzMzMzOMA19tdZSMEm51bXB5LmNvcmUubnVtZXJpY5SMC19mcm9tYnVmZmVylJOUKJYIAAAAAAAAAAAAAAAAAAAAlIwFbnVtcHmUjAVkdHlwZZSTlIwCZjiUiYiHlFKUKEsDjAE8lE5OTkr/////Sv////9LAHSUYksBhZSMAUOUdJRSlIwGX3NpZ21hlGgJKJYIAAAAAAAAAAAAAAAAAOA/lGgQSwGFlGgUdJRSlIwDX2R0lEc/hHrhR64Ue4wGX2R0eXBllGgLjAdmbG9hdDMylJOUjA1pbml0aWFsX25vaXNllE6MCm5vaXNlX3ByZXaUaAkolggAAAAAAAAAXD+hQ+mPwL+UaBBLAYWUaBR0lFKUdWIu",
        "_theta": 0.15,
        "_mu": "[0.]",
        "_sigma": "[0.5]",
        "_dt": 0.01,
        "_dtype": "<class 'numpy.float32'>",
        "initial_noise": null,
        "noise_prev": "[-0.12939182]"
    },
    "start_time": 1721057226532047652,
    "learning_rate": 0.001,
    "tensorboard_log": null,
    "_last_obs": {
        ":type:": "<class 'numpy.ndarray'>",
        ":serialized:": "gAWVfQAAAAAAAACMEm51bXB5LmNvcmUubnVtZXJpY5SMC19mcm9tYnVmZmVylJOUKJYIAAAAAAAAAN+wU7/xz0G6lIwFbnVtcHmUjAVkdHlwZZSTlIwCZjSUiYiHlFKUKEsDjAE8lE5OTkr/////Sv////9LAHSUYksBSwKGlIwBQ5R0lFKULg=="
    },
    "_last_episode_starts": {
        ":type:": "<class 'numpy.ndarray'>",
        ":serialized:": "gAWVdAAAAAAAAACMEm51bXB5LmNvcmUubnVtZXJpY5SMC19mcm9tYnVmZmVylJOUKJYBAAAAAAAAAAGUjAVudW1weZSMBWR0eXBllJOUjAJiMZSJiIeUUpQoSwOMAXyUTk5OSv////9K/////0sAdJRiSwGFlIwBQ5R0lFKULg=="
    },
    "_last_original_obs": {
        ":type:": "<class 'numpy.ndarray'>",
        ":serialized:": "gAWVfQAAAAAAAACMEm51bXB5LmNvcmUubnVtZXJpY5SMC19mcm9tYnVmZmVylJOUKJYIAAAAAAAAAGuAU797cIG7lIwFbnVtcHmUjAVkdHlwZZSTlIwCZjSUiYiHlFKUKEsDjAE8lE5OTkr/////Sv////9LAHSUYksBSwKGlIwBQ5R0lFKULg=="
    },
    "_episode_num": 2912,
    "use_sde": false,
    "sde_sample_freq": -1,
    "_current_progress_remaining": 0.0,
    "_stats_window_size": 100,
    "ep_info_buffer": {
        ":type:": "<class 'collections.deque'>",
        ":serialized:": "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"
    },
    "ep_success_buffer": {
        ":type:": "<class 'collections.deque'>",
        ":serialized:": "gAWVIAAAAAAAAACMC2NvbGxlY3Rpb25zlIwFZGVxdWWUk5QpS2SGlFKULg=="
    },
    "_n_updates": 299900,
    "observation_space": {
        ":type:": "<class 'gymnasium.spaces.box.Box'>",
        ":serialized:": "gAWVpAEAAAAAAACMFGd5bW5hc2l1bS5zcGFjZXMuYm94lIwDQm94lJOUKYGUfZQojAVkdHlwZZSMBW51bXB5lIwFZHR5cGWUk5SMAmY0lImIh5RSlChLA4wBPJROTk5K/////0r/////SwB0lGKMDWJvdW5kZWRfYmVsb3eUjBJudW1weS5jb3JlLm51bWVyaWOUjAtfZnJvbWJ1ZmZlcpSTlCiWAgAAAAAAAAABAZRoCIwCYjGUiYiHlFKUKEsDjAF8lE5OTkr/////Sv////9LAHSUYksChZSMAUOUdJRSlIwNYm91bmRlZF9hYm92ZZRoESiWAgAAAAAAAAABAZRoFUsChZRoGXSUUpSMBl9zaGFwZZRLAoWUjANsb3eUaBEolggAAAAAAAAAmpmZvylcj72UaAtLAoWUaBl0lFKUjARoaWdolGgRKJYIAAAAAAAAAJqZGT8pXI89lGgLSwKFlGgZdJRSlIwIbG93X3JlcHKUjA1bLTEuMiAgLTAuMDddlIwJaGlnaF9yZXBylIwLWzAuNiAgMC4wN12UjApfbnBfcmFuZG9tlE51Yi4=",
        "dtype": "float32",
        "bounded_below": "[ True  True]",
        "bounded_above": "[ True  True]",
        "_shape": [
            2
        ],
        "low": "[-1.2  -0.07]",
        "high": "[0.6  0.07]",
        "low_repr": "[-1.2  -0.07]",
        "high_repr": "[0.6  0.07]",
        "_np_random": null
    },
    "action_space": {
        ":type:": "<class 'gymnasium.spaces.box.Box'>",
        ":serialized:": "gAWVTQIAAAAAAACMFGd5bW5hc2l1bS5zcGFjZXMuYm94lIwDQm94lJOUKYGUfZQojAVkdHlwZZSMBW51bXB5lIwFZHR5cGWUk5SMAmY0lImIh5RSlChLA4wBPJROTk5K/////0r/////SwB0lGKMDWJvdW5kZWRfYmVsb3eUjBJudW1weS5jb3JlLm51bWVyaWOUjAtfZnJvbWJ1ZmZlcpSTlCiWAQAAAAAAAAABlGgIjAJiMZSJiIeUUpQoSwOMAXyUTk5OSv////9K/////0sAdJRiSwGFlIwBQ5R0lFKUjA1ib3VuZGVkX2Fib3ZllGgRKJYBAAAAAAAAAAGUaBVLAYWUaBl0lFKUjAZfc2hhcGWUSwGFlIwDbG93lGgRKJYEAAAAAAAAAAAAgL+UaAtLAYWUaBl0lFKUjARoaWdolGgRKJYEAAAAAAAAAAAAgD+UaAtLAYWUaBl0lFKUjAhsb3dfcmVwcpSMBC0xLjCUjAloaWdoX3JlcHKUjAMxLjCUjApfbnBfcmFuZG9tlIwUbnVtcHkucmFuZG9tLl9waWNrbGWUjBBfX2dlbmVyYXRvcl9jdG9ylJOUjAVQQ0c2NJRoMowUX19iaXRfZ2VuZXJhdG9yX2N0b3KUk5SGlFKUfZQojA1iaXRfZ2VuZXJhdG9ylIwFUENHNjSUjAVzdGF0ZZR9lChoPYoR/RuxSQ6RIrgL9mL6h/3M7ACMA2luY5SKEMO3Y5SFFeFDYkdVupeYd0F1jApoYXNfdWludDMylEsAjAh1aW50ZWdlcpRLAHVidWIu",
        "dtype": "float32",
        "bounded_below": "[ True]",
        "bounded_above": "[ True]",
        "_shape": [
            1
        ],
        "low": "[-1.]",
        "high": "[1.]",
        "low_repr": "-1.0",
        "high_repr": "1.0",
        "_np_random": "Generator(PCG64)"
    },
    "n_envs": 1,
    "buffer_size": 1000000,
    "batch_size": 256,
    "learning_starts": 100,
    "tau": 0.005,
    "gamma": 0.99,
    "gradient_steps": 1,
    "optimize_memory_usage": false,
    "replay_buffer_class": {
        ":type:": "<class 'abc.ABCMeta'>",
        ":serialized:": "gAWVNQAAAAAAAACMIHN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi5idWZmZXJzlIwMUmVwbGF5QnVmZmVylJOULg==",
        "__module__": "stable_baselines3.common.buffers",
        "__annotations__": "{'observations': <class 'numpy.ndarray'>, 'next_observations': <class 'numpy.ndarray'>, 'actions': <class 'numpy.ndarray'>, 'rewards': <class 'numpy.ndarray'>, 'dones': <class 'numpy.ndarray'>, 'timeouts': <class 'numpy.ndarray'>}",
        "__doc__": "\n    Replay buffer used in off-policy algorithms like SAC/TD3.\n\n    :param buffer_size: Max number of element in the buffer\n    :param observation_space: Observation space\n    :param action_space: Action space\n    :param device: PyTorch device\n    :param n_envs: Number of parallel environments\n    :param optimize_memory_usage: Enable a memory efficient variant\n        of the replay buffer which reduces by almost a factor two the memory used,\n        at a cost of more complexity.\n        See https://github.com/DLR-RM/stable-baselines3/issues/37#issuecomment-637501195\n        and https://github.com/DLR-RM/stable-baselines3/pull/28#issuecomment-637559274\n        Cannot be used in combination with handle_timeout_termination.\n    :param handle_timeout_termination: Handle timeout termination (due to timelimit)\n        separately and treat the task as infinite horizon task.\n        https://github.com/DLR-RM/stable-baselines3/issues/284\n    ",
        "__init__": "<function ReplayBuffer.__init__ at 0xffff546cb910>",
        "add": "<function ReplayBuffer.add at 0xffff546cb9a0>",
        "sample": "<function ReplayBuffer.sample at 0xffff546cba30>",
        "_get_samples": "<function ReplayBuffer._get_samples at 0xffff546cbac0>",
        "_maybe_cast_dtype": "<staticmethod(<function ReplayBuffer._maybe_cast_dtype at 0xffff546cbb50>)>",
        "__abstractmethods__": "frozenset()",
        "_abc_impl": "<_abc._abc_data object at 0xffff54698640>"
    },
    "replay_buffer_kwargs": {},
    "train_freq": {
        ":type:": "<class 'stable_baselines3.common.type_aliases.TrainFreq'>",
        ":serialized:": "gAWVYQAAAAAAAACMJXN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi50eXBlX2FsaWFzZXOUjAlUcmFpbkZyZXGUk5RLAWgAjBJUcmFpbkZyZXF1ZW5jeVVuaXSUk5SMBHN0ZXCUhZRSlIaUgZQu"
    },
    "use_sde_at_warmup": false,
    "policy_delay": 2,
    "target_noise_clip": 0.5,
    "target_policy_noise": 0.2,
    "lr_schedule": {
        ":type:": "<class 'function'>",
        ":serialized:": "gAWV2gMAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwNX2J1aWx0aW5fdHlwZZSTlIwKTGFtYmRhVHlwZZSFlFKUKGgCjAhDb2RlVHlwZZSFlFKUKEsBSwBLAEsBSwNLE0MMdACIAHwAgwGDAVMAlE6FlIwFZmxvYXSUhZSMEnByb2dyZXNzX3JlbWFpbmluZ5SFlIxoL21lZGlhL3BzZi9Ib21lL1NoYXJlZC9QYXJhbGxlbHMvdGQzLy5lbnYvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9zdGFibGVfYmFzZWxpbmVzMy9jb21tb24vdXRpbHMucHmUjAg8bGFtYmRhPpRLYUMAlIwOdmFsdWVfc2NoZWR1bGWUhZQpdJRSlH2UKIwLX19wYWNrYWdlX1+UjBhzdGFibGVfYmFzZWxpbmVzMy5jb21tb26UjAhfX25hbWVfX5SMHnN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi51dGlsc5SMCF9fZmlsZV9flIxoL21lZGlhL3BzZi9Ib21lL1NoYXJlZC9QYXJhbGxlbHMvdGQzLy5lbnYvbGliL3B5dGhvbjMuMTAvc2l0ZS1wYWNrYWdlcy9zdGFibGVfYmFzZWxpbmVzMy9jb21tb24vdXRpbHMucHmUdU5OaACMEF9tYWtlX2VtcHR5X2NlbGyUk5QpUpSFlHSUUpSMHGNsb3VkcGlja2xlLmNsb3VkcGlja2xlX2Zhc3SUjBJfZnVuY3Rpb25fc2V0c3RhdGWUk5RoIn2UfZQoaBloEIwMX19xdWFsbmFtZV9flIwhZ2V0X3NjaGVkdWxlX2ZuLjxsb2NhbHM+LjxsYW1iZGE+lIwPX19hbm5vdGF0aW9uc19flH2UjA5fX2t3ZGVmYXVsdHNfX5ROjAxfX2RlZmF1bHRzX1+UTowKX19tb2R1bGVfX5RoGowHX19kb2NfX5ROjAtfX2Nsb3N1cmVfX5RoAIwKX21ha2VfY2VsbJSTlGgFKGgIKEsBSwBLAEsBSwFLE0MEiABTAJRoCimMAV+UhZRoD4wEZnVuY5RLhUMCAAGUjAN2YWyUhZQpdJRSlGgWTk5oHilSlIWUdJRSlGglaD99lH2UKGgZaDZoKIwZY29uc3RhbnRfZm4uPGxvY2Fscz4uZnVuY5RoKn2UaCxOaC1OaC5oGmgvTmgwaDJHP1BiTdLxqfyFlFKUhZSMF19jbG91ZHBpY2tsZV9zdWJtb2R1bGVzlF2UjAtfX2dsb2JhbHNfX5R9lHWGlIZSMIWUUpSFlGhHXZRoSX2UdYaUhlIwLg=="
    },
    "actor_batch_norm_stats": [],
    "critic_batch_norm_stats": [],
    "actor_batch_norm_stats_target": [],
    "critic_batch_norm_stats_target": []
}